/**
 * Profitelo API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering */

export class ViewsApi {
    protected basePath = 'https:///';
    public defaultHeaders : any = {};

    static $inject: string[] = ['$http', 'apiUrl', '$httpParamSerializer'];

    constructor(protected $http: ng.IHttpService, apiUrl?: string, protected $httpParamSerializer?: (d: any) => any) {
        if (apiUrl !== undefined) {
            this.basePath = apiUrl;
        }
    }

    /**
        * Get service usage event details
        * 
        * @param sueId sueId
        */
    public getClientDashboardCallDetailsRoute = (sueId: string, extraHttpRequestParams?: any ) : ng.IPromise<models.GetCallDetails> => {
        const localVarPath = this.basePath + '/views/profile/client/sue/{sueId}/details'
            .replace('{' + 'sueId' + '}', String(sueId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'sueId' is not null or undefined
        if (sueId === null || sueId === undefined) {
            throw new Error('Required parameter sueId was null or undefined when calling getClientDashboardCallDetailsRoute.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams).then(response => {
            if (typeof response.data !== 'undefined') {
              return response.data
            }
            else {
              throw new Error('Response was not defined')
            }
          });
    }
    /**
        * Get client dashboard activities
        * 
        * @param activityType ActivityType
        * @param profileId AccountId
        * @param serviceId ServiceId
        * @param dateFrom Instant
        * @param dateTo Instant
        * @param limit Int
        * @param offset Int
        */
    public getDashboardClientActivitiesRoute = (activityType?: string, profileId?: string, serviceId?: string, dateFrom?: string, dateTo?: string, limit?: string, offset?: string, extraHttpRequestParams?: any ) : ng.IPromise<models.GetActivities> => {
        const localVarPath = this.basePath + '/views/profile/client/activities';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        if (activityType !== undefined) {
            queryParameters['activityType'] = activityType;
        }

        if (profileId !== undefined) {
            queryParameters['profileId'] = profileId;
        }

        if (serviceId !== undefined) {
            queryParameters['serviceId'] = serviceId;
        }

        if (dateFrom !== undefined) {
            queryParameters['dateFrom'] = dateFrom;
        }

        if (dateTo !== undefined) {
            queryParameters['dateTo'] = dateTo;
        }

        if (limit !== undefined) {
            queryParameters['limit'] = limit;
        }

        if (offset !== undefined) {
            queryParameters['offset'] = offset;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams).then(response => {
            if (typeof response.data !== 'undefined') {
              return response.data
            }
            else {
              throw new Error('Response was not defined')
            }
          });
    }
    /**
        * Get client dashboard
        * 
        */
    public getDashboardClientExpertsRoute = (extraHttpRequestParams?: any ) : ng.IPromise<models.GetDashboardClientExperts> => {
        const localVarPath = this.basePath + '/views/profile/client/experts';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams).then(response => {
            if (typeof response.data !== 'undefined') {
              return response.data
            }
            else {
              throw new Error('Response was not defined')
            }
          });
    }
    /**
        * Get full expert profile
        * 
        * @param profileId profileId
        */
    public getExpertProfileRoute = (profileId: string, extraHttpRequestParams?: any ) : ng.IPromise<models.GetExpertProfile> => {
        const localVarPath = this.basePath + '/views/profile/{profileId}/expert'
            .replace('{' + 'profileId' + '}', String(profileId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'profileId' is not null or undefined
        if (profileId === null || profileId === undefined) {
            throw new Error('Required parameter profileId was null or undefined when calling getExpertProfileRoute.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams).then(response => {
            if (typeof response.data !== 'undefined') {
              return response.data
            }
            else {
              throw new Error('Response was not defined')
            }
          });
    }
    /**
        * Get full organization profile
        * 
        * @param profileId profileId
        */
    public getOrganizationProfileRoute = (profileId: string, extraHttpRequestParams?: any ) : ng.IPromise<models.GetOrganizationProfile> => {
        const localVarPath = this.basePath + '/views/profile/{profileId}/organization'
            .replace('{' + 'profileId' + '}', String(profileId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'profileId' is not null or undefined
        if (profileId === null || profileId === undefined) {
            throw new Error('Required parameter profileId was null or undefined when calling getOrganizationProfileRoute.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams).then(response => {
            if (typeof response.data !== 'undefined') {
              return response.data
            }
            else {
              throw new Error('Response was not defined')
            }
          });
    }
}

export class ViewsApiMock {
    apiUrl = ''
    static $inject: string[] = ['$httpBackend', 'apiUrl', '$httpParamSerializer'];

    constructor(protected $httpBackend: ng.IHttpBackendService, apiUrl: string, protected $httpParamSerializer?: (d: any) => any) {
        if (apiUrl !== undefined) {
            this.apiUrl = apiUrl;
        }
    }

    public getClientDashboardCallDetailsRoute = (status: number, sueId: string, data?: models.GetCallDetails, err?: any): void => {
      const localVarPath = this.apiUrl + '/views/profile/client/sue/{sueId}/details'
          .replace('{' + 'sueId' + '}', String(sueId));

      const queryParameters: any = {}
      const queryUrl = this.serializeQuery(queryParameters)

      this.$httpBackend.whenGET(localVarPath+queryUrl)
        .respond(status, (typeof err !== 'undefined') ? err : data)
    }
    public getDashboardClientActivitiesRoute = (status: number, activityType?: string, profileId?: string, serviceId?: string, dateFrom?: string, dateTo?: string, limit?: string, offset?: string, data?: models.GetActivities, err?: any): void => {
      const localVarPath = this.apiUrl + '/views/profile/client/activities';

      const queryParameters: any = {}
      if (activityType !== undefined) {
        queryParameters['activityType'] = activityType;
      }
      if (profileId !== undefined) {
        queryParameters['profileId'] = profileId;
      }
      if (serviceId !== undefined) {
        queryParameters['serviceId'] = serviceId;
      }
      if (dateFrom !== undefined) {
        queryParameters['dateFrom'] = dateFrom;
      }
      if (dateTo !== undefined) {
        queryParameters['dateTo'] = dateTo;
      }
      if (limit !== undefined) {
        queryParameters['limit'] = limit;
      }
      if (offset !== undefined) {
        queryParameters['offset'] = offset;
      }
      const queryUrl = this.serializeQuery(queryParameters)

      this.$httpBackend.whenGET(localVarPath+queryUrl)
        .respond(status, (typeof err !== 'undefined') ? err : data)
    }
    public getDashboardClientExpertsRoute = (status: number, data?: models.GetDashboardClientExperts, err?: any): void => {
      const localVarPath = this.apiUrl + '/views/profile/client/experts';

      const queryParameters: any = {}
      const queryUrl = this.serializeQuery(queryParameters)

      this.$httpBackend.whenGET(localVarPath+queryUrl)
        .respond(status, (typeof err !== 'undefined') ? err : data)
    }
    public getExpertProfileRoute = (status: number, profileId: string, data?: models.GetExpertProfile, err?: any): void => {
      const localVarPath = this.apiUrl + '/views/profile/{profileId}/expert'
          .replace('{' + 'profileId' + '}', String(profileId));

      const queryParameters: any = {}
      const queryUrl = this.serializeQuery(queryParameters)

      this.$httpBackend.whenGET(localVarPath+queryUrl)
        .respond(status, (typeof err !== 'undefined') ? err : data)
    }
    public getOrganizationProfileRoute = (status: number, profileId: string, data?: models.GetOrganizationProfile, err?: any): void => {
      const localVarPath = this.apiUrl + '/views/profile/{profileId}/organization'
          .replace('{' + 'profileId' + '}', String(profileId));

      const queryParameters: any = {}
      const queryUrl = this.serializeQuery(queryParameters)

      this.$httpBackend.whenGET(localVarPath+queryUrl)
        .respond(status, (typeof err !== 'undefined') ? err : data)
    }

    private serializeQuery = (obj: any) => {
      var str = [];
      for(var p in obj)
        if (obj.hasOwnProperty(p)) {
          str.push(encodeURIComponent(p) + "=" + encodeURIComponent(obj[p]));
        }
      const url = str.join("&")
      return (url.length >0) ? '?'+url : ''
    }
  }
