/**
 * Profitelo API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from '../model/models';

models;

/* tslint:disable:no-unused-variable member-ordering */

export class AccountApi {
    protected basePath = 'https:///';
    public defaultHeaders : any = {};

    static $inject: string[] = ['$http', 'apiUrl', '$httpParamSerializer'];

    constructor(protected $http: ng.IHttpService, apiUrl?: string, protected $httpParamSerializer?: (d: any) => any) {
        if (apiUrl !== undefined) {
            this.basePath = apiUrl;
        }
    }

    /**
        * Create account
        * 
        * @param body New account
        */
    public addAccountRoute = (body: models.AddAccount, extraHttpRequestParams?: any ) : ng.IPromise<models.Account> => {
        const localVarPath = this.basePath + '/accounts';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling addAccountRoute.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: body,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams).then(response => {
            if (typeof response.data !== 'undefined') {
              return response.data
            }
            else {
              throw new Error('Response was not defined')
            }
          });
    }
    /**
        * Change default payment method
        * 
        * @param body ChangeDefaultCreditCard
        */
    public changeDefaultPaymentMethodRoute = (body?: models.ChangeDefaultCreditCard, extraHttpRequestParams?: any ) : ng.IPromise<{}> => {
        const localVarPath = this.basePath + '/accounts/default-payment-method';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let httpRequestParams: ng.IRequestConfig = {
            method: 'PATCH',
            url: localVarPath,
            data: body,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams).then(response => {
            if (typeof response.data !== 'undefined') {
              return response.data
            }
            else {
              throw new Error('Response was not defined')
            }
          });
    }
    /**
        * Change account password
        * 
        * @param body Change account object
        */
    public changePasswordRoute = (body: models.ChangeAccountPassword, extraHttpRequestParams?: any ) : ng.IPromise<{}> => {
        const localVarPath = this.basePath + '/accounts/settings/change-password';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling changePasswordRoute.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'PUT',
            url: localVarPath,
            data: body,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams).then(response => {
            if (typeof response.data !== 'undefined') {
              return response.data
            }
            else {
              throw new Error('Response was not defined')
            }
          });
    }
    /**
        * Confirm msisdn verification
        * 
        * @param body Verification token
        */
    public confirmMsisdnVerificationRoute = (body: models.ConfirmMsisdnVerificationRequest, extraHttpRequestParams?: any ) : ng.IPromise<{}> => {
        const localVarPath = this.basePath + '/accounts/settings/msisdn-verification/confirm';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling confirmMsisdnVerificationRoute.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: body,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams).then(response => {
            if (typeof response.data !== 'undefined') {
              return response.data
            }
            else {
              throw new Error('Response was not defined')
            }
          });
    }
    /**
        * Check if email is taken
        * 
        * @param email Email
        */
    public getAccountEmailExistsRoute = (email: string, extraHttpRequestParams?: any ) : ng.IPromise<{}> => {
        const localVarPath = this.basePath + '/accounts/exists/email/{email}'
            .replace('{' + 'email' + '}', String(email));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'email' is not null or undefined
        if (email === null || email === undefined) {
            throw new Error('Required parameter email was null or undefined when calling getAccountEmailExistsRoute.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams).then(response => {
            if (typeof response.data !== 'undefined') {
              return response.data
            }
            else {
              throw new Error('Response was not defined')
            }
          });
    }
    /**
        * Get company info
        * 
        */
    public getCompanyInfoRoute = (extraHttpRequestParams?: any ) : ng.IPromise<models.CompanyInfo> => {
        const localVarPath = this.basePath + '/accounts/settings/company-info';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams).then(response => {
            if (typeof response.data !== 'undefined') {
              return response.data
            }
            else {
              throw new Error('Response was not defined')
            }
          });
    }
    /**
        * Get mobile protected views
        * 
        */
    public getMobileProtectedViewsRoute = (extraHttpRequestParams?: any ) : ng.IPromise<models.GetMobileProtectedViews> => {
        const localVarPath = this.basePath + '/accounts/mobile-permissions/protected-views';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams).then(response => {
            if (typeof response.data !== 'undefined') {
              return response.data
            }
            else {
              throw new Error('Response was not defined')
            }
          });
    }
    /**
        * Retrieve
        * 
        * @param msisdn Phone number
        */
    public getRegistrationStatusByMsisdnRoute = (msisdn: string, extraHttpRequestParams?: any ) : ng.IPromise<models.GetRegistrationStatus> => {
        const localVarPath = this.basePath + '/accounts/check';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'msisdn' is not null or undefined
        if (msisdn === null || msisdn === undefined) {
            throw new Error('Required parameter msisdn was null or undefined when calling getRegistrationStatusByMsisdnRoute.');
        }
        if (msisdn !== undefined) {
            queryParameters['msisdn'] = msisdn;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams).then(response => {
            if (typeof response.data !== 'undefined') {
              return response.data
            }
            else {
              throw new Error('Response was not defined')
            }
          });
    }
    /**
        * Get all supported countries
        * 
        */
    public getSupportedCountriesRoute = (extraHttpRequestParams?: any ) : ng.IPromise<Array<models.Country>> => {
        const localVarPath = this.basePath + '/accounts/settings/countries';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams).then(response => {
            if (typeof response.data !== 'undefined') {
              return response.data
            }
            else {
              throw new Error('Response was not defined')
            }
          });
    }
    /**
        * List accounts
        * 
        */
    public listAccountsRoute = (extraHttpRequestParams?: any ) : ng.IPromise<Array<models.Account>> => {
        const localVarPath = this.basePath + '/accounts';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams).then(response => {
            if (typeof response.data !== 'undefined') {
              return response.data
            }
            else {
              throw new Error('Response was not defined')
            }
          });
    }
    /**
        * Request new msisdn verification
        * 
        * @param body Create new msisdn verification
        */
    public newMsisdnVerificationRoute = (body: models.CreateMsisdnVerificationRequest, extraHttpRequestParams?: any ) : ng.IPromise<models.JValue> => {
        const localVarPath = this.basePath + '/accounts/settings/msisdn-verification/create';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling newMsisdnVerificationRoute.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: body,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams).then(response => {
            if (typeof response.data !== 'undefined') {
              return response.data
            }
            else {
              throw new Error('Response was not defined')
            }
          });
    }
    /**
        * Partial update account
        * 
        * @param accountId Account ID
        * @param body Account to update
        */
    public partialUpdateAccountRoute = (accountId: string, body: models.PatchAccount, extraHttpRequestParams?: any ) : ng.IPromise<models.Account> => {
        const localVarPath = this.basePath + '/accounts/{accountId}'
            .replace('{' + 'accountId' + '}', String(accountId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'accountId' is not null or undefined
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling partialUpdateAccountRoute.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling partialUpdateAccountRoute.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'PATCH',
            url: localVarPath,
            data: body,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams).then(response => {
            if (typeof response.data !== 'undefined') {
              return response.data
            }
            else {
              throw new Error('Response was not defined')
            }
          });
    }
    /**
        * Patch mobile pin with protected views
        * 
        * @param body PatchMobileViewsPermissions
        */
    public patchMobileViewsPermissionsRoute = (body: models.PatchMobileViewsPermissions, extraHttpRequestParams?: any ) : ng.IPromise<models.Account> => {
        const localVarPath = this.basePath + '/accounts/mobile-permissions';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchMobileViewsPermissionsRoute.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'PATCH',
            url: localVarPath,
            data: body,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams).then(response => {
            if (typeof response.data !== 'undefined') {
              return response.data
            }
            else {
              throw new Error('Response was not defined')
            }
          });
    }
    /**
        * Confirm email
        * 
        * @param token Confirmation token
        */
    public postAccountVerifyEmailRoute = (token: string, extraHttpRequestParams?: any ) : ng.IPromise<models.GetSession> => {
        const localVarPath = this.basePath + '/accounts/confirm/email/{token}'
            .replace('{' + 'token' + '}', String(token));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'token' is not null or undefined
        if (token === null || token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling postAccountVerifyEmailRoute.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams).then(response => {
            if (typeof response.data !== 'undefined') {
              return response.data
            }
            else {
              throw new Error('Response was not defined')
            }
          });
    }
    /**
        * Post company info
        * 
        * @param body Replace company info
        */
    public postCompanyInfoRoute = (body: models.PostCompanyInfo, extraHttpRequestParams?: any ) : ng.IPromise<models.CompanyInfo> => {
        const localVarPath = this.basePath + '/accounts/settings/company-info';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postCompanyInfoRoute.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: body,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams).then(response => {
            if (typeof response.data !== 'undefined') {
              return response.data
            }
            else {
              throw new Error('Response was not defined')
            }
          });
    }
    /**
        * Post mobile pin with protected views
        * 
        * @param body PostMobileViewsPermissions
        */
    public postMobilePinRoute = (body: models.PostMobileViewsPermissions, extraHttpRequestParams?: any ) : ng.IPromise<models.Account> => {
        const localVarPath = this.basePath + '/accounts/mobile-permissions';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postMobilePinRoute.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: body,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams).then(response => {
            if (typeof response.data !== 'undefined') {
              return response.data
            }
            else {
              throw new Error('Response was not defined')
            }
          });
    }
    /**
        * Put general settings
        * 
        * @param body General settings
        */
    public putGeneralSettingsRoute = (body: models.PutGeneralSettings, extraHttpRequestParams?: any ) : ng.IPromise<{}> => {
        const localVarPath = this.basePath + '/accounts/settings/general';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling putGeneralSettingsRoute.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'PUT',
            url: localVarPath,
            data: body,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams).then(response => {
            if (typeof response.data !== 'undefined') {
              return response.data
            }
            else {
              throw new Error('Response was not defined')
            }
          });
    }
    /**
        * Update account
        * 
        * @param accountId Account ID
        * @param body Account to update
        */
    public updateAccountRoute = (accountId: string, body: models.UpdateAccount, extraHttpRequestParams?: any ) : ng.IPromise<models.Account> => {
        const localVarPath = this.basePath + '/accounts/{accountId}'
            .replace('{' + 'accountId' + '}', String(accountId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'accountId' is not null or undefined
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling updateAccountRoute.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateAccountRoute.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'PUT',
            url: localVarPath,
            data: body,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams).then(response => {
            if (typeof response.data !== 'undefined') {
              return response.data
            }
            else {
              throw new Error('Response was not defined')
            }
          });
    }
    /**
        * Validate mobile pin
        * 
        * @param pin mobile pin
        */
    public validateMobilePinRoute = (pin: string, extraHttpRequestParams?: any ) : ng.IPromise<{}> => {
        const localVarPath = this.basePath + '/accounts/mobile-permissions/{pin}'
            .replace('{' + 'pin' + '}', String(pin));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'pin' is not null or undefined
        if (pin === null || pin === undefined) {
            throw new Error('Required parameter pin was null or undefined when calling validateMobilePinRoute.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams).then(response => {
            if (typeof response.data !== 'undefined') {
              return response.data
            }
            else {
              throw new Error('Response was not defined')
            }
          });
    }
}

export class AccountApiMock {
    apiUrl = ''
    static $inject: string[] = ['$httpBackend', 'apiUrl', '$httpParamSerializer'];

    constructor(protected $httpBackend: ng.IHttpBackendService, apiUrl: string, protected $httpParamSerializer?: (d: any) => any) {
        if (apiUrl !== undefined) {
            this.apiUrl = apiUrl;
        }
    }

    public addAccountRoute = (status: number, data?: models.Account, err?: any): void => {
      const localVarPath = this.apiUrl + '/accounts';

      const queryParameters: any = {}
      const queryUrl = this.serializeQuery(queryParameters)

      this.$httpBackend.whenPOST(localVarPath+queryUrl)
        .respond(status, (typeof err !== 'undefined') ? err : data)
    }
    public changeDefaultPaymentMethodRoute = (status: number, data?: {}, err?: any): void => {
      const localVarPath = this.apiUrl + '/accounts/default-payment-method';

      const queryParameters: any = {}
      const queryUrl = this.serializeQuery(queryParameters)

      this.$httpBackend.whenPATCH(localVarPath+queryUrl)
        .respond(status, (typeof err !== 'undefined') ? err : data)
    }
    public changePasswordRoute = (status: number, data?: {}, err?: any): void => {
      const localVarPath = this.apiUrl + '/accounts/settings/change-password';

      const queryParameters: any = {}
      const queryUrl = this.serializeQuery(queryParameters)

      this.$httpBackend.whenPUT(localVarPath+queryUrl)
        .respond(status, (typeof err !== 'undefined') ? err : data)
    }
    public confirmMsisdnVerificationRoute = (status: number, data?: {}, err?: any): void => {
      const localVarPath = this.apiUrl + '/accounts/settings/msisdn-verification/confirm';

      const queryParameters: any = {}
      const queryUrl = this.serializeQuery(queryParameters)

      this.$httpBackend.whenPOST(localVarPath+queryUrl)
        .respond(status, (typeof err !== 'undefined') ? err : data)
    }
    public getAccountEmailExistsRoute = (status: number, email: string, data?: {}, err?: any): void => {
      const localVarPath = this.apiUrl + '/accounts/exists/email/{email}'
          .replace('{' + 'email' + '}', String(email));

      const queryParameters: any = {}
      const queryUrl = this.serializeQuery(queryParameters)

      this.$httpBackend.whenGET(localVarPath+queryUrl)
        .respond(status, (typeof err !== 'undefined') ? err : data)
    }
    public getCompanyInfoRoute = (status: number, data?: models.CompanyInfo, err?: any): void => {
      const localVarPath = this.apiUrl + '/accounts/settings/company-info';

      const queryParameters: any = {}
      const queryUrl = this.serializeQuery(queryParameters)

      this.$httpBackend.whenGET(localVarPath+queryUrl)
        .respond(status, (typeof err !== 'undefined') ? err : data)
    }
    public getMobileProtectedViewsRoute = (status: number, data?: models.GetMobileProtectedViews, err?: any): void => {
      const localVarPath = this.apiUrl + '/accounts/mobile-permissions/protected-views';

      const queryParameters: any = {}
      const queryUrl = this.serializeQuery(queryParameters)

      this.$httpBackend.whenGET(localVarPath+queryUrl)
        .respond(status, (typeof err !== 'undefined') ? err : data)
    }
    public getRegistrationStatusByMsisdnRoute = (status: number, msisdn: string, data?: models.GetRegistrationStatus, err?: any): void => {
      const localVarPath = this.apiUrl + '/accounts/check';

      const queryParameters: any = {}
      if (msisdn !== undefined) {
        queryParameters['msisdn'] = msisdn;
      }
      const queryUrl = this.serializeQuery(queryParameters)

      this.$httpBackend.whenGET(localVarPath+queryUrl)
        .respond(status, (typeof err !== 'undefined') ? err : data)
    }
    public getSupportedCountriesRoute = (status: number, data?: Array<models.Country>, err?: any): void => {
      const localVarPath = this.apiUrl + '/accounts/settings/countries';

      const queryParameters: any = {}
      const queryUrl = this.serializeQuery(queryParameters)

      this.$httpBackend.whenGET(localVarPath+queryUrl)
        .respond(status, (typeof err !== 'undefined') ? err : data)
    }
    public listAccountsRoute = (status: number, data?: Array<models.Account>, err?: any): void => {
      const localVarPath = this.apiUrl + '/accounts';

      const queryParameters: any = {}
      const queryUrl = this.serializeQuery(queryParameters)

      this.$httpBackend.whenGET(localVarPath+queryUrl)
        .respond(status, (typeof err !== 'undefined') ? err : data)
    }
    public newMsisdnVerificationRoute = (status: number, data?: models.JValue, err?: any): void => {
      const localVarPath = this.apiUrl + '/accounts/settings/msisdn-verification/create';

      const queryParameters: any = {}
      const queryUrl = this.serializeQuery(queryParameters)

      this.$httpBackend.whenPOST(localVarPath+queryUrl)
        .respond(status, (typeof err !== 'undefined') ? err : data)
    }
    public partialUpdateAccountRoute = (status: number, accountId: string, data?: models.Account, err?: any): void => {
      const localVarPath = this.apiUrl + '/accounts/{accountId}'
          .replace('{' + 'accountId' + '}', String(accountId));

      const queryParameters: any = {}
      const queryUrl = this.serializeQuery(queryParameters)

      this.$httpBackend.whenPATCH(localVarPath+queryUrl)
        .respond(status, (typeof err !== 'undefined') ? err : data)
    }
    public patchMobileViewsPermissionsRoute = (status: number, data?: models.Account, err?: any): void => {
      const localVarPath = this.apiUrl + '/accounts/mobile-permissions';

      const queryParameters: any = {}
      const queryUrl = this.serializeQuery(queryParameters)

      this.$httpBackend.whenPATCH(localVarPath+queryUrl)
        .respond(status, (typeof err !== 'undefined') ? err : data)
    }
    public postAccountVerifyEmailRoute = (status: number, token: string, data?: models.GetSession, err?: any): void => {
      const localVarPath = this.apiUrl + '/accounts/confirm/email/{token}'
          .replace('{' + 'token' + '}', String(token));

      const queryParameters: any = {}
      const queryUrl = this.serializeQuery(queryParameters)

      this.$httpBackend.whenPOST(localVarPath+queryUrl)
        .respond(status, (typeof err !== 'undefined') ? err : data)
    }
    public postCompanyInfoRoute = (status: number, data?: models.CompanyInfo, err?: any): void => {
      const localVarPath = this.apiUrl + '/accounts/settings/company-info';

      const queryParameters: any = {}
      const queryUrl = this.serializeQuery(queryParameters)

      this.$httpBackend.whenPOST(localVarPath+queryUrl)
        .respond(status, (typeof err !== 'undefined') ? err : data)
    }
    public postMobilePinRoute = (status: number, data?: models.Account, err?: any): void => {
      const localVarPath = this.apiUrl + '/accounts/mobile-permissions';

      const queryParameters: any = {}
      const queryUrl = this.serializeQuery(queryParameters)

      this.$httpBackend.whenPOST(localVarPath+queryUrl)
        .respond(status, (typeof err !== 'undefined') ? err : data)
    }
    public putGeneralSettingsRoute = (status: number, data?: {}, err?: any): void => {
      const localVarPath = this.apiUrl + '/accounts/settings/general';

      const queryParameters: any = {}
      const queryUrl = this.serializeQuery(queryParameters)

      this.$httpBackend.whenPUT(localVarPath+queryUrl)
        .respond(status, (typeof err !== 'undefined') ? err : data)
    }
    public updateAccountRoute = (status: number, accountId: string, data?: models.Account, err?: any): void => {
      const localVarPath = this.apiUrl + '/accounts/{accountId}'
          .replace('{' + 'accountId' + '}', String(accountId));

      const queryParameters: any = {}
      const queryUrl = this.serializeQuery(queryParameters)

      this.$httpBackend.whenPUT(localVarPath+queryUrl)
        .respond(status, (typeof err !== 'undefined') ? err : data)
    }
    public validateMobilePinRoute = (status: number, pin: string, data?: {}, err?: any): void => {
      const localVarPath = this.apiUrl + '/accounts/mobile-permissions/{pin}'
          .replace('{' + 'pin' + '}', String(pin));

      const queryParameters: any = {}
      const queryUrl = this.serializeQuery(queryParameters)

      this.$httpBackend.whenGET(localVarPath+queryUrl)
        .respond(status, (typeof err !== 'undefined') ? err : data)
    }

    private serializeQuery = (obj: any) => {
      var str = [];
      for(var p in obj)
        if (obj.hasOwnProperty(p)) {
          str.push(encodeURIComponent(p) + "=" + encodeURIComponent(obj[p]));
        }
      const url = str.join("&")
      return (url.length >0) ? '?'+url : ''
    }
  }
