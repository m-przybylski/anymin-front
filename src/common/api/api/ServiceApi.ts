/**
 * Profitelo API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from '../model/models';

models;

/* tslint:disable:no-unused-variable member-ordering */

export class ServiceApi {
    protected basePath = 'https:///';
    public defaultHeaders : any = {};

    static $inject: string[] = ['$http', 'apiUrl', '$httpParamSerializer'];

    constructor(protected $http: ng.IHttpService, apiUrl?: string, protected $httpParamSerializer?: (d: any) => any) {
        if (apiUrl !== undefined) {
            this.basePath = apiUrl;
        }
    }

    /**
        * Request usage of service
        * 
        * @param serviceId serviceId
        * @param body AddServiceUsageRequest
        */
    public addServiceUsageRequestRoute = (serviceId: string, body: models.AddServiceUsageRequest, extraHttpRequestParams?: any ) : ng.IPromise<models.GetServiceUsageRequest> => {
        const localVarPath = this.basePath + '/services/{serviceId}/usage-request'
            .replace('{' + 'serviceId' + '}', String(serviceId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'serviceId' is not null or undefined
        if (serviceId === null || serviceId === undefined) {
            throw new Error('Required parameter serviceId was null or undefined when calling addServiceUsageRequestRoute.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling addServiceUsageRequestRoute.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: body,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams).then(response => {
            if (typeof response.data !== 'undefined') {
              return response.data
            }
            else {
              throw new Error('Response was not defined')
            }
          });
    }
    /**
        * Remove service by id
        * 
        * @param serviceId serviceId
        */
    public deleteServiceRoute = (serviceId: string, extraHttpRequestParams?: any ) : ng.IPromise<{}> => {
        const localVarPath = this.basePath + '/services/{serviceId}'
            .replace('{' + 'serviceId' + '}', String(serviceId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'serviceId' is not null or undefined
        if (serviceId === null || serviceId === undefined) {
            throw new Error('Required parameter serviceId was null or undefined when calling deleteServiceRoute.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'DELETE',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams).then(response => {
            if (typeof response.data !== 'undefined') {
              return response.data
            }
            else {
              throw new Error('Response was not defined')
            }
          });
    }
    /**
        * Get Details of services of users
        * 
        * @param accountId accountId
        */
    public getProfileServicesRoute = (accountId: string, extraHttpRequestParams?: any ) : ng.IPromise<Array<models.GetService>> => {
        const localVarPath = this.basePath + '/services/profile/{accountId}'
            .replace('{' + 'accountId' + '}', String(accountId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'accountId' is not null or undefined
        if (accountId === null || accountId === undefined) {
            throw new Error('Required parameter accountId was null or undefined when calling getProfileServicesRoute.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams).then(response => {
            if (typeof response.data !== 'undefined') {
              return response.data
            }
            else {
              throw new Error('Response was not defined')
            }
          });
    }
    /**
        * Get Details of a service
        * 
        * @param serviceId serviceId
        */
    public getServiceRoute = (serviceId: string, extraHttpRequestParams?: any ) : ng.IPromise<models.GetService> => {
        const localVarPath = this.basePath + '/services/{serviceId}'
            .replace('{' + 'serviceId' + '}', String(serviceId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'serviceId' is not null or undefined
        if (serviceId === null || serviceId === undefined) {
            throw new Error('Required parameter serviceId was null or undefined when calling getServiceRoute.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams).then(response => {
            if (typeof response.data !== 'undefined') {
              return response.data
            }
            else {
              throw new Error('Response was not defined')
            }
          });
    }
    /**
        * Get suggested employees
        * 
        * @param expression expression
        */
    public getSuggestionsRoute = (expression: string, extraHttpRequestParams?: any ) : ng.IPromise<Array<models.GetService>> => {
        const localVarPath = this.basePath + '/services/suggest/{expression}'
            .replace('{' + 'expression' + '}', String(expression));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'expression' is not null or undefined
        if (expression === null || expression === undefined) {
            throw new Error('Required parameter expression was null or undefined when calling getSuggestionsRoute.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams).then(response => {
            if (typeof response.data !== 'undefined') {
              return response.data
            }
            else {
              throw new Error('Response was not defined')
            }
          });
    }
    /**
        * Create service recommendation
        * 
        * @param serviceUsageEventId serviceUsageEventId
        */
    public postServiceRecommendationRoute = (serviceUsageEventId: string, extraHttpRequestParams?: any ) : ng.IPromise<models.ServiceRecommendation> => {
        const localVarPath = this.basePath + '/services/{serviceUsageEventId}/recommend'
            .replace('{' + 'serviceUsageEventId' + '}', String(serviceUsageEventId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'serviceUsageEventId' is not null or undefined
        if (serviceUsageEventId === null || serviceUsageEventId === undefined) {
            throw new Error('Required parameter serviceUsageEventId was null or undefined when calling postServiceRecommendationRoute.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams).then(response => {
            if (typeof response.data !== 'undefined') {
              return response.data
            }
            else {
              throw new Error('Response was not defined')
            }
          });
    }
    /**
        * Create a service
        * 
        * @param body UpdateServiceDetails
        */
    public postServiceRoute = (body: models.PostService, extraHttpRequestParams?: any ) : ng.IPromise<models.GetService> => {
        const localVarPath = this.basePath + '/services';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postServiceRoute.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: body,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams).then(response => {
            if (typeof response.data !== 'undefined') {
              return response.data
            }
            else {
              throw new Error('Response was not defined')
            }
          });
    }
    /**
        * Get Details of a service and employees
        * 
        * @param body serviceIds
        */
    public postServiceWithEmployeesRoute = (body: models.PostServicesWithEmployees, extraHttpRequestParams?: any ) : ng.IPromise<Array<models.GetServiceWithEmployees>> => {
        const localVarPath = this.basePath + '/services/employees';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postServiceWithEmployeesRoute.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: body,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams).then(response => {
            if (typeof response.data !== 'undefined') {
              return response.data
            }
            else {
              throw new Error('Response was not defined')
            }
          });
    }
    /**
        * Get services tags
        * 
        * @param body UpdateServiceDetails
        */
    public postServicesTagsRoute = (body: models.PostServicesTags, extraHttpRequestParams?: any ) : ng.IPromise<Array<models.GetServiceTags>> => {
        const localVarPath = this.basePath + '/services/tags';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling postServicesTagsRoute.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: body,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams).then(response => {
            if (typeof response.data !== 'undefined') {
              return response.data
            }
            else {
              throw new Error('Response was not defined')
            }
          });
    }
    /**
        * Verify services
        * 
        */
    public postServicesVerifyRoute = (extraHttpRequestParams?: any ) : ng.IPromise<{}> => {
        const localVarPath = this.basePath + '/services/verify';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams).then(response => {
            if (typeof response.data !== 'undefined') {
              return response.data
            }
            else {
              throw new Error('Response was not defined')
            }
          });
    }
    /**
        * Update service recommendations
        * 
        * @param serviceUsageEventId serviceUsageEventId
        * @param body UpdateServiceRecommendations
        */
    public putServiceRecommendationsRoute = (serviceUsageEventId: string, body: models.PutServiceRecommendations, extraHttpRequestParams?: any ) : ng.IPromise<models.GetService> => {
        const localVarPath = this.basePath + '/services/{serviceUsageEventId}/recommend'
            .replace('{' + 'serviceUsageEventId' + '}', String(serviceUsageEventId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'serviceUsageEventId' is not null or undefined
        if (serviceUsageEventId === null || serviceUsageEventId === undefined) {
            throw new Error('Required parameter serviceUsageEventId was null or undefined when calling putServiceRecommendationsRoute.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling putServiceRecommendationsRoute.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'PUT',
            url: localVarPath,
            data: body,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams).then(response => {
            if (typeof response.data !== 'undefined') {
              return response.data
            }
            else {
              throw new Error('Response was not defined')
            }
          });
    }
    /**
        * Update Details of a service
        * 
        * @param serviceId serviceId
        * @param body UpdateServiceDetails
        */
    public putServiceRoute = (serviceId: string, body: models.PutService, extraHttpRequestParams?: any ) : ng.IPromise<models.GetService> => {
        const localVarPath = this.basePath + '/services/{serviceId}'
            .replace('{' + 'serviceId' + '}', String(serviceId));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'serviceId' is not null or undefined
        if (serviceId === null || serviceId === undefined) {
            throw new Error('Required parameter serviceId was null or undefined when calling putServiceRoute.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling putServiceRoute.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'PUT',
            url: localVarPath,
            data: body,
                        params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams).then(response => {
            if (typeof response.data !== 'undefined') {
              return response.data
            }
            else {
              throw new Error('Response was not defined')
            }
          });
    }
}

export class ServiceApiMock {
    apiUrl = ''
    static $inject: string[] = ['$httpBackend', 'apiUrl', '$httpParamSerializer'];

    constructor(protected $httpBackend: ng.IHttpBackendService, apiUrl: string, protected $httpParamSerializer?: (d: any) => any) {
        if (apiUrl !== undefined) {
            this.apiUrl = apiUrl;
        }
    }

    public addServiceUsageRequestRoute = (status: number, serviceId: string, data?: models.GetServiceUsageRequest, err?: any): void => {
      const localVarPath = this.apiUrl + '/services/{serviceId}/usage-request'
          .replace('{' + 'serviceId' + '}', String(serviceId));

      const queryParameters: any = {}
      const queryUrl = this.serializeQuery(queryParameters)

      this.$httpBackend.whenPOST(localVarPath+queryUrl)
        .respond(status, (typeof err !== 'undefined') ? err : data)
    }
    public deleteServiceRoute = (status: number, serviceId: string, data?: {}, err?: any): void => {
      const localVarPath = this.apiUrl + '/services/{serviceId}'
          .replace('{' + 'serviceId' + '}', String(serviceId));

      const queryParameters: any = {}
      const queryUrl = this.serializeQuery(queryParameters)

      this.$httpBackend.whenDELETE(localVarPath+queryUrl)
        .respond(status, (typeof err !== 'undefined') ? err : data)
    }
    public getProfileServicesRoute = (status: number, accountId: string, data?: Array<models.GetService>, err?: any): void => {
      const localVarPath = this.apiUrl + '/services/profile/{accountId}'
          .replace('{' + 'accountId' + '}', String(accountId));

      const queryParameters: any = {}
      const queryUrl = this.serializeQuery(queryParameters)

      this.$httpBackend.whenGET(localVarPath+queryUrl)
        .respond(status, (typeof err !== 'undefined') ? err : data)
    }
    public getServiceRoute = (status: number, serviceId: string, data?: models.GetService, err?: any): void => {
      const localVarPath = this.apiUrl + '/services/{serviceId}'
          .replace('{' + 'serviceId' + '}', String(serviceId));

      const queryParameters: any = {}
      const queryUrl = this.serializeQuery(queryParameters)

      this.$httpBackend.whenGET(localVarPath+queryUrl)
        .respond(status, (typeof err !== 'undefined') ? err : data)
    }
    public getSuggestionsRoute = (status: number, expression: string, data?: Array<models.GetService>, err?: any): void => {
      const localVarPath = this.apiUrl + '/services/suggest/{expression}'
          .replace('{' + 'expression' + '}', String(expression));

      const queryParameters: any = {}
      const queryUrl = this.serializeQuery(queryParameters)

      this.$httpBackend.whenGET(localVarPath+queryUrl)
        .respond(status, (typeof err !== 'undefined') ? err : data)
    }
    public postServiceRecommendationRoute = (status: number, serviceUsageEventId: string, data?: models.ServiceRecommendation, err?: any): void => {
      const localVarPath = this.apiUrl + '/services/{serviceUsageEventId}/recommend'
          .replace('{' + 'serviceUsageEventId' + '}', String(serviceUsageEventId));

      const queryParameters: any = {}
      const queryUrl = this.serializeQuery(queryParameters)

      this.$httpBackend.whenPOST(localVarPath+queryUrl)
        .respond(status, (typeof err !== 'undefined') ? err : data)
    }
    public postServiceRoute = (status: number, data?: models.GetService, err?: any): void => {
      const localVarPath = this.apiUrl + '/services';

      const queryParameters: any = {}
      const queryUrl = this.serializeQuery(queryParameters)

      this.$httpBackend.whenPOST(localVarPath+queryUrl)
        .respond(status, (typeof err !== 'undefined') ? err : data)
    }
    public postServiceWithEmployeesRoute = (status: number, data?: Array<models.GetServiceWithEmployees>, err?: any): void => {
      const localVarPath = this.apiUrl + '/services/employees';

      const queryParameters: any = {}
      const queryUrl = this.serializeQuery(queryParameters)

      this.$httpBackend.whenPOST(localVarPath+queryUrl)
        .respond(status, (typeof err !== 'undefined') ? err : data)
    }
    public postServicesTagsRoute = (status: number, data?: Array<models.GetServiceTags>, err?: any): void => {
      const localVarPath = this.apiUrl + '/services/tags';

      const queryParameters: any = {}
      const queryUrl = this.serializeQuery(queryParameters)

      this.$httpBackend.whenPOST(localVarPath+queryUrl)
        .respond(status, (typeof err !== 'undefined') ? err : data)
    }
    public postServicesVerifyRoute = (status: number, data?: {}, err?: any): void => {
      const localVarPath = this.apiUrl + '/services/verify';

      const queryParameters: any = {}
      const queryUrl = this.serializeQuery(queryParameters)

      this.$httpBackend.whenPOST(localVarPath+queryUrl)
        .respond(status, (typeof err !== 'undefined') ? err : data)
    }
    public putServiceRecommendationsRoute = (status: number, serviceUsageEventId: string, data?: models.GetService, err?: any): void => {
      const localVarPath = this.apiUrl + '/services/{serviceUsageEventId}/recommend'
          .replace('{' + 'serviceUsageEventId' + '}', String(serviceUsageEventId));

      const queryParameters: any = {}
      const queryUrl = this.serializeQuery(queryParameters)

      this.$httpBackend.whenPUT(localVarPath+queryUrl)
        .respond(status, (typeof err !== 'undefined') ? err : data)
    }
    public putServiceRoute = (status: number, serviceId: string, data?: models.GetService, err?: any): void => {
      const localVarPath = this.apiUrl + '/services/{serviceId}'
          .replace('{' + 'serviceId' + '}', String(serviceId));

      const queryParameters: any = {}
      const queryUrl = this.serializeQuery(queryParameters)

      this.$httpBackend.whenPUT(localVarPath+queryUrl)
        .respond(status, (typeof err !== 'undefined') ? err : data)
    }

    private serializeQuery = (obj: any) => {
      var str = [];
      for(var p in obj)
        if (obj.hasOwnProperty(p)) {
          str.push(encodeURIComponent(p) + "=" + encodeURIComponent(obj[p]));
        }
      const url = str.join("&")
      return (url.length >0) ? '?'+url : ''
    }
  }
